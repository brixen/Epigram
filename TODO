Miscellaneous tidying:
* Provide better name advice in place of "".

Quotation:
* Use idiom brackets on quote.
* Write inQuote/exQuote more directly using themselves as chevs?
  :: (Alternative m, Rooty m, MonadError [String] m) => TY :>: INTM -> m (INTM :=>: VAL)
* Tidy exQuote: lhs2TeX alignment, match against C, not use unC (or is there a GADT problem?).

Type-checker:
0: Change check and infer to fit the chev pattern. (DONE)
* Make infer ensure operators have the correct number of arguments. (Switch to using telescopes.)

Features:
* Create standard template for feature files and make them conform to it.
* Update documentation for operators.
0 Ulf: Create appropriate aspect and remove Desc in Desc stuff from Rules. (DONE)

Display syntax and elaboration:
0 Adam: Blue equality should work with EXTMs other than ascriptions. (DONE)
0 Adam: Make elaborate aspect-based. (DONE)
0 Adam: Add aspect for DTm. (DONE)
2: Schemes on entries.
1 Adam: Add underscore with appropriate behaviour.
0 Adam: distillation (reverse elaboration). (DONE)

Cochon:
0 Adam: Implement show hypotheses. (DONE)
1 Pierre: Allow comments in pig files.
0: Consider what output should be displayed after each cochon command. (DONE)
* Make cochon accept tacticals (then (semicolon), else, skip, try) with progressive output.
* Use readline or similar library for command history and tab-completion.
* Command to export context in a reloadable format.

Proof State:
* Make should return an EXTM.
* Construction commands should return value form as well as term form.
0 Adam: Fix mysterious news propagation bug in elimination. (DONE)

Programming with Desc:
* Differentiate Desc.
* Write predicates: is a description first-order, is equality decidable.

Extending Desc:
* Special case arg in Desc for S an enumeration and D a tuple?
0 Peter: Generalise Desc to IDesc (dependent types). (DONE)
* Levitate IDesc. 
0 James: Basic coinduction (Nu). (DONE)
0 James: Indexed Nu. (DONE)
1 James: Equality for coinduction (once we have inhabitation and indexed Desc).
0 Ulf+Conor: Implement the free monad Tm along with tmElim, subst and map operators. (DONE)
0 Ulf: Extend operators with a new component, opSimp  :: [VAL] -> Root -> Maybe NEU
   that is used to simplify neutral operator applications; thus operators preserve
   relevant laws for neutral terms, so they hold definitionally. (DONE)
0 Ulf: simplification for map. (DONE)
0 Ulf: simplification for subst. (DONE)

Compilation:
0 Edwin: Integrate lambda-lifting phase. (DONE)

Programming Technology:
1 Pierre: Elimination with a motive.
1 Edwin: Labelled types for programs.
* Propositional simplification.
* Matching.

Type-system Extensions:
0 James: inhabitation propositions. (DONE)
0 Ulf: Quotients. (DONE)
