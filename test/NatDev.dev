[ nat
    [ h00
        [ \ s : Enum ['zero 'suc] ->
        ] switch ['zero 'suc] s (\ s -> Desc) [(con ['constD (Sig ())]) (con ['prodD 'idD (con ['constD (Sig ())])])] : Desc ;
    ] Mu (con ['sigmaD (Enum ['zero 'suc]) h00]) : Set ;
  zero := 'zero : nat ;
  suc
    [ \ x : nat ->
    ] con ['suc x] : nat ;
  one := suc zero : nat ;
  two := suc one : nat ;
  plus
    [ G50
        [ G500
            [ G5000
                [ \ r : Sig () ->
                  \ r : Sig () ->
                  \ y : nat ->
                ] y : nat ;
              G5001
                [ \ r : Sig (nat ;) ->
                  G50011
                    [ \ h : (nat -> nat) ->
                      \ r : Sig () ->
                      \ y : nat ->
                    ] suc (h y) : nat ;
                  \ x : Sig (nat -> nat ;) ->
                ] G50011 (x !) _ : nat -> nat ;
              \ s : Enum ['zero 'suc] ->
            ] switch ['zero 'suc] s (\ s -> ((x : desc (switch ['zero 'suc] s (\ s -> Desc) [(con ['constD (Sig ())]) (con ['prodD 'idD (con ['constD (Sig ())])])]) nat) -> box (switch ['zero 'suc] s (\ s -> Desc) [(con ['constD (Sig ())]) (con ['prodD 'idD (con ['constD (Sig ())])])]) nat (\ _ -> (nat -> nat)) x -> nat -> nat)) [G5000 G5001] : (x : desc (switch ['zero 'suc] s (\ s -> Desc) [(con ['constD (Sig ())]) (con ['prodD 'idD (con ['constD (Sig ())])])]) nat) -> box (switch ['zero 'suc] s (\ s -> Desc) [(con ['constD (Sig ())]) (con ['prodD 'idD (con ['constD (Sig ())])])]) nat (\ _ -> (nat -> nat)) x -> nat -> nat ;
          \ x : Sig (s : Enum ['zero 'suc] ; desc (switch ['zero 'suc] s (\ s -> Desc) [(con ['constD (Sig ())]) (con ['prodD 'idD (con ['constD (Sig ())])])]) nat) ->
        ] G500 (x !) (x -) : box (switch ['zero 'suc] (x !) (\ s -> Desc) [(con ['constD (Sig ())]) (con ['prodD 'idD (con ['constD (Sig ())])])]) nat (\ _ -> (nat -> nat)) (x -) -> nat -> nat ;
      \ x : nat ->
    ] induction (con ['sigmaD (Enum ['zero 'suc]) (\ s -> switch ['zero 'suc] s (\ s -> Desc) [(con ['constD (Sig ())]) (con ['prodD 'idD (con ['constD (Sig ())])])])]) x (\ _ -> (nat -> nat)) G50 : nat -> nat ;
  x := plus two two : nat ;
]
