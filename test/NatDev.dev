[ nat
    [ h00
        [ \ x : Enum ['zero 'suc] ->
        ] switchD ['zero 'suc] [[] (con ['ind1 []])] x : Desc ;
    ] Mu [(Enum ['zero 'suc]) , h00] : Set ;
  zero := [] : nat ;
  suc
    [ \ x : nat ->
    ] con ['suc x] : nat ;
  one := suc zero : nat ;
  two := suc one : nat ;
  plus
    [ G50
        [ G500
            [ G5000
                [ \ r : Sig () ->
                  \ r : Sig () ->
                  \ y : nat ->
                ] y : nat ;
              G5001
                [ \ r : Sig (nat ;) ->
                  G50011
                    [ \ h : (nat -> nat) ->
                      \ r : Sig () ->
                      \ y : nat ->
                    ] suc (h y) : nat ;
                  \ x : Sig (nat -> nat ;) ->
                ] G50011 (x !) (x -) : nat -> nat ;
              \ a : Enum ['zero 'suc] ->
            ] switch ['zero 'suc] a (\ a -> ((x : desc (((switchD ['zero 'suc]) [[] (con ['ind1 []])]) a) nat)(x : box (((switchD ['zero 'suc]) [[] (con ['ind1 []])]) a) nat (\ _ -> (nat -> nat)) x) -> nat -> nat)) [G5000 G5001] : (x : desc (((switchD ['zero 'suc]) [[] (con ['ind1 []])]) a) nat)(x : box (((switchD ['zero 'suc]) [[] (con ['ind1 []])]) a) nat (\ _ -> (nat -> nat)) x) -> nat -> nat ;
          \ x : Sig (a : Enum ['zero 'suc] ; desc (((switchD ['zero 'suc]) [[] (con ['ind1 []])]) a) nat) ->
        ] G500 (x !) (x -) : (x : box (((switchD ['zero 'suc]) [[] (con ['ind1 []])]) (x !)) nat (\ _ -> (nat -> nat)) (x -)) -> nat -> nat ;
      \ x : nat ->
    ] fold [(Enum ['zero 'suc]) , \ x -> switchD ['zero 'suc] [[] (con ['ind1 []])] x] x (\ _ -> (nat -> nat)) G50 : nat -> nat ;
  x := plus two two : nat ;
]