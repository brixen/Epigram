[ nat
    [ h00
        [ \ s : Enum ['zero 'suc] ->
          h001
            [ \ s : Enum ['zero 'suc] ->
            ] Desc : Set ;
        ] switch ['zero 'suc] s h001 [(con ['constD (Sig ())]) (con ['prodD [] (con ['constD (Sig ())])])] : Desc ;
    ] Mu (con ['sigmaD (Enum ['zero 'suc]) h00]) : Set ;
  zero := [] : nat ;
  suc
    [ \ x : nat ->
    ] con ['suc x] : nat ;
  one := suc zero : nat ;
  two := suc one : nat ;
  plus
    [ G50
        [ G500
            [ G5000
                [ \ r : Sig () ->
                  \ r : Sig () ->
                  \ y : nat ->
                ] y : nat ;
              G5001
                [ \ r : Sig (nat ;) ->
                  G50011
                    [ \ h : (nat -> nat) ->
                      \ r : Sig () ->
                      \ y : nat ->
                    ] suc (h y) : nat ;
                  \ x : Sig (nat -> nat ;) ->
                ] G50011 (x !) _ : nat -> nat ;
              \ s : Enum ['zero 'suc] ->
              h5003
                [ \ s : Enum ['zero 'suc] ->
                ] Desc : Set ;
              h5004
                [ \ x : desc (switch ['zero 'suc] s (\ s -> Desc) [(con ['constD (Sig ())]) (con ['prodD [] (con ['constD (Sig ())])])]) nat ->
                  h50041
                    [ \ s : Enum ['zero 'suc] ->
                    ] Desc : Set ;
                ] (box (switch ['zero 'suc] s h50041 [(con ['constD (Sig ())]) (con ['prodD [] (con ['constD (Sig ())])])]) nat (\ _ -> (nat -> nat)) x -> nat -> nat) : Set ;
              h5005
                [ \ s : Enum ['zero 'suc] ->
                  h50051
                    [ \ s : Enum ['zero 'suc] ->
                    ] Desc : Set ;
                  h50052
                    [ \ x : desc (switch ['zero 'suc] s (\ s -> Desc) [(con ['constD (Sig ())]) (con ['prodD [] (con ['constD (Sig ())])])]) nat ->
                      h500521
                        [ \ s : Enum ['zero 'suc] ->
                        ] Desc : Set ;
                    ] (box (switch ['zero 'suc] s h500521 [(con ['constD (Sig ())]) (con ['prodD [] (con ['constD (Sig ())])])]) nat (\ _ -> (nat -> nat)) x -> nat -> nat) : Set ;
                ] (Pi (desc (switch ['zero 'suc] s h50051 [(con ['constD (Sig ())]) (con ['prodD [] (con ['constD (Sig ())])])]) nat) h50052) : Set ;
            ] switch ['zero 'suc] s h5005 [G5000 G5001] : Pi (desc (switch ['zero 'suc] s h5003 [(con ['constD (Sig ())]) (con ['prodD [] (con ['constD (Sig ())])])]) nat) h5004 ;
          h501
            [ \ s : Enum ['zero 'suc] ->
              h5011
                [ \ s : Enum ['zero 'suc] ->
                ] Desc : Set ;
            ] desc (switch ['zero 'suc] s h5011 [(con ['constD (Sig ())]) (con ['prodD [] (con ['constD (Sig ())])])]) nat : Set ;
          \ x : Sig (s : Enum ['zero 'suc] ; desc (switch ['zero 'suc] s (\ s -> Desc) [(con ['constD (Sig ())]) (con ['prodD [] (con ['constD (Sig ())])])]) nat) ->
          h503
            [ \ s : Enum ['zero 'suc] ->
            ] Desc : Set ;
        ] G500 (x !) (x -) : box (switch ['zero 'suc] (x !) h503 [(con ['constD (Sig ())]) (con ['prodD [] (con ['constD (Sig ())])])]) nat (\ _ -> (nat -> nat)) (x -) -> nat -> nat ;
      \ x : nat ->
      h52
        [ \ s : Enum ['zero 'suc] ->
          h521
            [ \ s : Enum ['zero 'suc] ->
            ] Desc : Set ;
        ] switch ['zero 'suc] s h521 [(con ['constD (Sig ())]) (con ['prodD [] (con ['constD (Sig ())])])] : Desc ;
    ] induction (con ['sigmaD (Enum ['zero 'suc]) h52]) x (\ _ -> (nat -> nat)) G50 : nat -> nat ;
  x := plus two two : nat ;
]
Loaded.
