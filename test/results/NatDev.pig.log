[ nat
    [ h00
        [ \ x : Enum ['zero 'suc] ->
        ] switch ['zero 'suc] x (\ _ -> Desc) [[] (con ['ind1 []])] : Desc ;
    ] Mu [(Enum ['zero 'suc]) , h00] : Set ;
  zero := [] : nat ;
  suc
    [ \ x : nat ->
    ] con ['suc x] : nat ;
  one := suc zero : nat ;
  two := suc one : nat ;
  plus
    [ G50
        [ G500
            [ G5000
                [ \ r : Sig () ->
                  \ r : Sig () ->
                  \ y : nat ->
                ] y : nat ;
              G5001
                [ \ r : Sig (nat ;) ->
                  G50011
                    [ \ h : (nat -> nat) ->
                      \ r : Sig () ->
                      \ y : nat ->
                    ] suc (h y) : nat ;
                  \ x : Sig (nat -> nat ;) ->
                ] G50011 (x !) _ : nat -> nat ;
              \ a : Enum ['zero 'suc] ->
              h5003
                [ \ x : desc (switch ['zero 'suc] a (\ _ -> Desc) [[] (con ['ind1 []])]) nat ->
                ] (box (switch ['zero 'suc] a (\ _ -> Desc) [[] (con ['ind1 []])]) nat (\ _ -> (nat -> nat)) x -> nat -> nat) : Set ;
              h5004
                [ \ a : Enum ['zero 'suc] ->
                  h50041
                    [ \ x : desc (switch ['zero 'suc] a (\ _ -> Desc) [[] (con ['ind1 []])]) nat ->
                    ] (box (switch ['zero 'suc] a (\ _ -> Desc) [[] (con ['ind1 []])]) nat (\ _ -> (nat -> nat)) x -> nat -> nat) : Set ;
                ] (Pi (desc (switch ['zero 'suc] a (\ _ -> Desc) [[] (con ['ind1 []])]) nat) h50041) : Set ;
            ] switch ['zero 'suc] a h5004 [G5000 G5001] : Pi (desc (switch ['zero 'suc] a (\ _ -> Desc) [[] (con ['ind1 []])]) nat) h5003 ;
          h501
            [ \ a : Enum ['zero 'suc] ->
            ] desc (switch ['zero 'suc] a (\ _ -> Desc) [[] (con ['ind1 []])]) nat : Set ;
          \ x : Sig (a : Enum ['zero 'suc] ; desc (switch ['zero 'suc] a (\ _ -> Desc) [[] (con ['ind1 []])]) nat) ->
        ] G500 (x !) (x -) : box (switch ['zero 'suc] (x !) (\ _ -> Desc) [[] (con ['ind1 []])]) nat (\ _ -> (nat -> nat)) (x -) -> nat -> nat ;
      \ x : nat ->
      h52
        [ \ x : Enum ['zero 'suc] ->
        ] switch ['zero 'suc] x (\ _ -> Desc) [[] (con ['ind1 []])] : Desc ;
    ] fold [(Enum ['zero 'suc]) , h52] x (\ _ -> (nat -> nat)) G50 : nat -> nat ;
  x := plus two two : nat ;
]
Loaded.
