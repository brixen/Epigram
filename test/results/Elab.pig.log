Made.
Made.
[Set , A]
Made.
elab
Jumping to f_4.a_0...
Thank you.
Going to root...
[Set , f Set]
Made.
Made.
Made.
Made.
Made.
[ id
    [ h00
        [ \ X : Set ->
        ] (X -> X) : Set ;
      \ X : Set ->
      \ x : X ->
    ] x : X ;
  A := ? : Set ;
  elab
    [ hope := Set : Set ;
      eq := refl Set Set : :- ((: Set) Set) == hope ;
    ] [hope , id hope (coe Set hope eq A)] : Sig (sst : Set ; sst) ;
  f
    [ a := (Set -> Set) : Set ;
    ] ? : a ;
  elab := [Set , f Set] : Sig (sst : Set ; sst) ;
  x
    [ hope := Set : Set ;
      can := Set : hope ;
      eq := refl Set Set : :- hope == ((: Set) Set) ;
    ] ? : coe hope Set eq (id hope can) ;
  B := HOPE? : Set ;
  C := HOPE? : Prop ;
  p := HOPE? : :- B == C ;
  q
    [ hope := HOPE? : Set ;
      can
        := (SUSPENDED: WaitCan (N (P (q_12.hope_0 := HOLE Hoping :<: C (Set))) :=>: Nothing) (ElabProb (DC Set))) ? : hope ;
    ] HOPE? : :- B == ((: hope -> hope) (\ typecast -> typecast) can) ;
]
Loaded.
